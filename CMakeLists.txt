#options
#JANSSON_INCLUDE
#JANSSON_LIBRARY

cmake_minimum_required(VERSION 2.8)
project (lib_netsockets)
include(CheckCXXCompilerFlag)
set(BUILD_SHARED_LIBRARIES OFF)
set(HAVE_JANSSON OFF)

find_path(JANSSON_INCLUDE_FOUND jansson.h HINTS ${JANSSON_INCLUDE} "/usr/include" "/data/data127/pvicente/install/jansson-2.9/include")
if(NOT JANSSON_INCLUDE_FOUND)
  message("-- jansson.h header file not found...JSON functions will not be available")
else()
  message("-- Found jansson.h header file at: " ${JANSSON_INCLUDE_FOUND})
  add_definitions(-DHAVE_JANSSON)
  set(HAVE_JANSSON ON)
endif()

if (HAVE_JANSSON)
find_library(JANSSON_LIBRARY NAMES jansson HINTS "/data/data127/pvicente/install/jansson-2.9/lib/")
if(NOT JANSSON_LIBRARY)
  message(FATAL_ERROR "jansson library not found")
else()
  message("-- Found jansson library at: " ${JANSSON_LIBRARY})
endif()
endif(HAVE_JANSSON)

if (MSVC)
  add_definitions( "/D_CRT_SECURE_NO_WARNINGS /D_WINSOCK_DEPRECATED_NO_WARNINGS" )
  if (STATIC_CRT)
    message("-- Building with static runtime library")
    set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od /RTC1")
    set(CMAKE_CXX_FLAGS_MINSIZEREL     "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE        "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
  endif()  
  set(WINSOCK_LIBRARY ws2_32.lib)
endif(MSVC)

if (CMAKE_VERSION VERSION_LESS "3.1")
 if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
   CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
   CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
   if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
   endif()
 endif()
else ()
  set (CMAKE_CXX_STANDARD 11)
endif()

set(LIBS ${LIBS} ${WINSOCK_LIBRARY})
if (HAVE_JANSSON)
set(LIBS ${LIBS} ${JANSSON_LIBRARY})
endif(HAVE_JANSSON)

include_directories(src)
if (HAVE_JANSSON)
include_directories(${JANSSON_INCLUDE_FOUND})
endif(HAVE_JANSSON)

set(SOURCES src/socket.cc src/http.cc src/ftp.cc src/socket.hh src/http.hh src/ftp.hh)
add_executable(tcp_client_01 examples/tcp_client_01.cc ${SOURCES})
add_executable(tcp_server_01 examples/tcp_server_01.cc ${SOURCES})
add_executable(http_client examples/http_client.cc ${SOURCES})
add_executable(http_server examples/http_server.cc ${SOURCES})
add_executable(ftp_client examples/ftp_client.cc ${SOURCES})
add_executable(json_client examples/json_client.cc ${SOURCES})
add_executable(json_server examples/json_server.cc ${SOURCES})
target_link_libraries (tcp_client_01 ${LIBS})
target_link_libraries (tcp_server_01 ${LIBS})
target_link_libraries (http_client ${LIBS})
target_link_libraries (http_server ${LIBS})
target_link_libraries (ftp_client ${LIBS})
target_link_libraries (json_client ${LIBS})
target_link_libraries (json_server ${LIBS})
